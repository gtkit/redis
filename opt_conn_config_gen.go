// Generated by [go-option] -type ConnConfig; DO NOT EDIT
// If you have any questions, please create issues and submit contributions at:
// https://github.com/gtkit/go-option

package redis

type ConnConfigOption interface {
	apply(*ConnConfig)
}

func NewConnConfig(opts ...ConnConfigOption) *ConnConfig {
	connConfig := &ConnConfig{}

	for _, opt := range opts {
		opt.apply(connConfig)
	}

	return connConfig
}

/**
 * field name: addr
 */
type addr struct {
	addr string
}

// apply the addr option to the given struct.
func (a addr) apply(opt *ConnConfig) {
	opt.addr = a.addr
}

// WithAddr Option.
func WithAddr(optAddr string) ConnConfigOption {
	return addr{
		addr: optAddr,
	}
}

/**
 * field name: username
 */
type username struct {
	username string
}

// apply the username option to the given struct.
func (u username) apply(opt *ConnConfig) {
	opt.username = u.username
}

// WithUsername Option.
func WithUsername(optUsername string) ConnConfigOption {
	return username{
		username: optUsername,
	}
}

/**
 * field name: password
 */
type password struct {
	password string
}

// apply the password option to the given struct.
func (p password) apply(opt *ConnConfig) {
	opt.password = p.password
}

// WithPassword Option.
func WithPassword(optPassword string) ConnConfigOption {
	return password{
		password: optPassword,
	}
}

/**
 * field name: dbconfig
 */
type dbconfig struct {
	dbconfig DBConfig
}

// apply the dbconfig option to the given struct.
func (d dbconfig) apply(opt *ConnConfig) {
	opt.dbconfig = append(opt.dbconfig, d.dbconfig)
}

// WithDbconfig Option.
func WithDB(DB int, prefix ...string) ConnConfigOption {
	var pre string
	if len(prefix) == 0 {
		pre = ""
	} else {
		pre = prefix[0]
	}

	return dbconfig{
		dbconfig: DBConfig{
			DB:     DB,
			Prefix: pre,
		},
	}
}
