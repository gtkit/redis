// Generated by [go-option] -type ClientOpt; DO NOT EDIT
// If you have any questions, please create issues and submit contributions at:
// https://github.com/gtkit/go-option

package failover

import (
	"crypto/tls"
	"time"
)

type ClientOptOption interface {
	apply(*ClientOpt)
}

func NewClientOpt(opts ...ClientOptOption) *ClientOpt {
	clientOpt := &ClientOpt{}

	for _, opt := range opts {
		opt.apply(clientOpt)
	}

	return clientOpt
}

/**
 * field name: MasterName
 */
type MasterName struct {
	masterName string
}

// apply the MasterName option to the given struct.
func (m MasterName) apply(opt *ClientOpt) {
	opt.MasterName = m.masterName
}

// WithMasterName Option.
func WithMasterName(optMasterName string) ClientOptOption {
	return MasterName{
		masterName: optMasterName,
	}
}

/**
 * field name: SentinelAddrs
 */
type SentinelAddrs struct {
	sentinelAddrs []string
}

// apply the SentinelAddrs option to the given struct.
func (s SentinelAddrs) apply(opt *ClientOpt) {
	opt.SentinelAddrs = s.sentinelAddrs
}

// WithSentinelAddrs Option.
func WithSentinelAddrs(optSentinelAddrs []string) ClientOptOption {
	return SentinelAddrs{
		sentinelAddrs: optSentinelAddrs,
	}
}

/**
 * field name: SentinelPassword
 */
type SentinelPassword struct {
	sentinelPassword string
}

// apply the SentinelPassword option to the given struct.
func (s SentinelPassword) apply(opt *ClientOpt) {
	opt.SentinelPassword = s.sentinelPassword
}

// WithSentinelPassword Option.
func WithSentinelPassword(optSentinelPassword string) ClientOptOption {
	return SentinelPassword{
		sentinelPassword: optSentinelPassword,
	}
}

/**
 * field name: Username
 */
type Username struct {
	username string
}

// apply the Username option to the given struct.
func (u Username) apply(opt *ClientOpt) {
	opt.Username = u.username
}

// WithUsername Option.
func WithUsername(optUsername string) ClientOptOption {
	return Username{
		username: optUsername,
	}
}

/**
 * field name: Password
 */
type Password struct {
	password string
}

// apply the Password option to the given struct.
func (p Password) apply(opt *ClientOpt) {
	opt.Password = p.password
}

// WithPassword Option.
func WithPassword(optPassword string) ClientOptOption {
	return Password{
		password: optPassword,
	}
}

/**
 * field name: DB
 */
type DB struct {
	dB int
}

// apply the DB option to the given struct.
func (d DB) apply(opt *ClientOpt) {
	opt.DB = d.dB
}

// WithDB Option.
func WithDB(optDB int) ClientOptOption {
	return DB{
		dB: optDB,
	}
}

/**
 * field name: DialTimeout
 */
type DialTimeout struct {
	dialTimeout time.Duration
}

// apply the DialTimeout option to the given struct.
func (d DialTimeout) apply(opt *ClientOpt) {
	opt.DialTimeout = d.dialTimeout
}

// WithDialTimeout Option.
func WithDialTimeout(optDialTimeout time.Duration) ClientOptOption {
	return DialTimeout{
		dialTimeout: optDialTimeout,
	}
}

/**
 * field name: ReadTimeout
 */
type ReadTimeout struct {
	readTimeout time.Duration
}

// apply the ReadTimeout option to the given struct.
func (r ReadTimeout) apply(opt *ClientOpt) {
	opt.ReadTimeout = r.readTimeout
}

// WithReadTimeout Option.
func WithReadTimeout(optReadTimeout time.Duration) ClientOptOption {
	return ReadTimeout{
		readTimeout: optReadTimeout,
	}
}

/**
 * field name: WriteTimeout
 */
type WriteTimeout struct {
	writeTimeout time.Duration
}

// apply the WriteTimeout option to the given struct.
func (w WriteTimeout) apply(opt *ClientOpt) {
	opt.WriteTimeout = w.writeTimeout
}

// WithWriteTimeout Option.
func WithWriteTimeout(optWriteTimeout time.Duration) ClientOptOption {
	return WriteTimeout{
		writeTimeout: optWriteTimeout,
	}
}

/**
 * field name: PoolSize
 */
type PoolSize struct {
	poolSize int
}

// apply the PoolSize option to the given struct.
func (p PoolSize) apply(opt *ClientOpt) {
	opt.PoolSize = p.poolSize
}

// WithPoolSize Option.
func WithPoolSize(optPoolSize int) ClientOptOption {
	return PoolSize{
		poolSize: optPoolSize,
	}
}

/**
 * field name: TLSConfig
 */
type TLSConfig struct {
	tLSConfig *tls.Config
}

// apply the TLSConfig option to the given struct.
func (t TLSConfig) apply(opt *ClientOpt) {
	opt.TLSConfig = t.tLSConfig
}

// WithTLSConfig Option.
func WithTLSConfig(optTLSConfig *tls.Config) ClientOptOption {
	return TLSConfig{
		tLSConfig: optTLSConfig,
	}
}
